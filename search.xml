<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java读取文件</title>
    <url>/2020/05/11/FileToArrayList/</url>
    <content><![CDATA[<p> 一、需求：读取txt文件内容按成绩排序后输出</p>
<p> 二、分析步骤：</p>
<ol>
<li>创建txt学生信息文件</li>
<li>创建学生类</li>
<li>创建字符缓冲输入流对象</li>
<li>创建ArrayList集合</li>
<li>调用缓冲输入流对象的方法读取数据</li>
<li>把读取到的字符串数据读取到集合中</li>
<li>释放资源</li>
<li>遍历集合</li>
</ol>
<p>创建txt文件</p>
<pre><code>姓名   成绩
张三,50
李四,20
王五,100
赵六,60</code></pre><p>读取时会跳过第一行标题，由于姓名与成绩之间用 英文逗号,隔开，下边会用split()来匹配 , 拆分字符串</p>
<h2 id="创建学生类"><a href="#创建学生类" class="headerlink" title="创建学生类"></a>创建学生类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> cj;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> cj)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.cj = cj;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cj;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCj</span><span class="params">(<span class="keyword">int</span> cj)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.cj = cj;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Student [name="</span> + name + <span class="string">", cj="</span> + cj + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建测试类FileToArrayListDemo"><a href="#创建测试类FileToArrayListDemo" class="headerlink" title="创建测试类FileToArrayListDemo"></a>创建测试类FileToArrayListDemo</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileToArrayListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">//防止乱码，并创建字符缓冲输入流对象</span></span><br><span class="line">		InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"E:/dc.txt"</span>),<span class="string">"utf8"</span>);</span><br><span class="line"></span><br><span class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">		<span class="comment">// 创建集合</span></span><br><span class="line">		ArrayList&lt;Student&gt; ar = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">		<span class="comment">//line用以判断字符后边是否为空</span></span><br><span class="line">		String line;</span><br><span class="line">		<span class="comment">//in用以判断读取是否为第一行是则跳过</span></span><br><span class="line">		<span class="keyword">int</span> in = <span class="number">0</span>;</span><br><span class="line">		Student st = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// 切割字符串</span></span><br><span class="line">			String[] strAy = line.split(<span class="string">","</span>);</span><br><span class="line">			<span class="comment">// 创建学生对象</span></span><br><span class="line">			st = <span class="keyword">new</span> Student();</span><br><span class="line">			<span class="comment">// 跳过第一行标题行</span></span><br><span class="line">			<span class="keyword">if</span> (in == <span class="number">0</span>) &#123;</span><br><span class="line">				in++;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// 给学生对象设置属性值</span></span><br><span class="line">				st.setName(strAy[<span class="number">0</span>]);</span><br><span class="line">				<span class="comment">//Integer.parseInt用以把字符转换为数字</span></span><br><span class="line">				st.setCj(Integer.parseInt(strAy[<span class="number">1</span>]));</span><br><span class="line">				<span class="comment">//把对象添加到集合</span></span><br><span class="line">				ar.add(st);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		br.close();</span><br><span class="line">		<span class="comment">//用增强for循环查看写入集合后的内容</span></span><br><span class="line">		<span class="keyword">for</span> (Student s : ar) &#123;</span><br><span class="line">			System.out.println(s.getName() + <span class="string">","</span> + s.getCj());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 对List集合进行排序操作，这儿使用匿名内部类Collections来完成</span></span><br><span class="line">		Collections.sort(ar, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">			<span class="comment">//重写该方法</span></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">				<span class="comment">// 排序主要条件：按成绩排序</span></span><br><span class="line">				<span class="keyword">int</span> num = s1.getCj() - s2.getCj();</span><br><span class="line">				<span class="keyword">return</span> num;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="comment">//用增强for循环查看排序后的结果</span></span><br><span class="line">		<span class="keyword">for</span> (Student s : ar) &#123;</span><br><span class="line">			System.out.println(s.getName() + <span class="string">","</span> + s.getCj());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 把排序好的信息写进指定文件</span></span><br><span class="line">		<span class="comment">//创建字符缓冲输出流对象</span></span><br><span class="line">		BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"E:/dcg.txt"</span>));</span><br><span class="line">		<span class="comment">//由于跳过了第一行标题，写入的时候手动添加进去</span></span><br><span class="line">		bw.write(<span class="string">"姓名   成绩\n"</span>);</span><br><span class="line">		<span class="keyword">for</span> (Student s : ar) &#123;</span><br><span class="line">			bw.write(s.getName() + <span class="string">"   "</span> + s.getCj());</span><br><span class="line">			bw.newLine();</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		bw.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后输入文件内容为</p>
<pre><code>姓名   成绩
李四   20
张三   50
赵六   60
王五   100</code></pre>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>javaio</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+next目录结构</title>
    <url>/2020/05/12/Hexo+Next/</url>
    <content><![CDATA[<h2 id="HEXO-默认目录结构："><a href="#HEXO-默认目录结构：" class="headerlink" title="HEXO 默认目录结构："></a>HEXO 默认目录结构：</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">├──</span> <span class="string">.deploy</span></span><br><span class="line"><span class="string">├──</span> <span class="string">public</span></span><br><span class="line"><span class="string">├──</span> <span class="string">scaffolds</span></span><br><span class="line"><span class="string">├──</span> <span class="string">scripts</span></span><br><span class="line"><span class="string">├──</span> <span class="string">source</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">_drafts</span></span><br><span class="line"><span class="string">|</span>   <span class="string">└──</span> <span class="string">_posts</span></span><br><span class="line"><span class="string">├──</span> <span class="string">themes</span></span><br><span class="line"><span class="string">├──</span> <span class="string">_config.yml</span></span><br><span class="line"><span class="string">└──</span> <span class="string">package.json</span></span><br></pre></td></tr></table></figure>
<p>deploy：执行hexo deploy命令部署到GitHub上的内容目录</p>
<p>public：执行hexo generate命令，输出的静态网页内容目录</p>
<p>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</p>
<p>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</p>
<p>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。</p>
<p>drafts：草稿文章</p>
<p>posts：发布文章</p>
<p>themes：文件主题目录</p>
<p>_config.yml：全局配置文件，大多数的设置都在这里</p>
<p>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</p>
<h2 id="next主题"><a href="#next主题" class="headerlink" title="next主题"></a>next主题</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">├──</span> <span class="string">.github</span>            <span class="comment">#git信息</span></span><br><span class="line"><span class="string">├──</span> <span class="string">languages</span>          <span class="comment">#多语言</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">default.yml</span>    <span class="comment">#默认语言</span></span><br><span class="line"><span class="string">|</span>   <span class="string">└──</span> <span class="string">zh-Hans.yml</span>    <span class="comment">#简体中文</span></span><br><span class="line"><span class="string">|</span>   <span class="string">└──</span> <span class="string">zh-tw.yml</span>      <span class="comment">#繁体中文</span></span><br><span class="line"><span class="string">├──</span> <span class="string">layout</span>             <span class="comment">#布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">_custom</span>        <span class="comment">#可以自己修改的模板，覆盖原有模板</span></span><br><span class="line"><span class="string">|</span>   <span class="string">|</span>   <span class="string">├──</span> <span class="string">_header.swig</span>    <span class="comment">#头部样式</span></span><br><span class="line"><span class="string">|</span>   <span class="string">|</span>   <span class="string">├──</span> <span class="string">_sidebar.swig</span>   <span class="comment">#侧边栏样式</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">_macro</span>        	   <span class="comment">#可以自己修改的模板，覆盖原有模板</span></span><br><span class="line"><span class="string">|</span>   <span class="string">|</span>   <span class="string">├──</span> <span class="string">post.swig</span>      <span class="comment">#文章模板</span></span><br><span class="line"><span class="string">|</span>   <span class="string">|</span>   <span class="string">├──</span> <span class="string">reward.swig</span>    <span class="comment">#打赏模板</span></span><br><span class="line"><span class="string">|</span>   <span class="string">|</span>   <span class="string">├──</span> <span class="string">sidebar.swig</span>   <span class="comment">#侧边栏模板</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">_partial</span>       <span class="comment">#局部的布局</span></span><br><span class="line"><span class="string">|</span>   <span class="string">|</span>   <span class="string">├──</span> <span class="string">head</span>       <span class="comment">#头部模板</span></span><br><span class="line"><span class="string">|</span>   <span class="string">|</span>   <span class="string">├──</span> <span class="string">search</span>     <span class="comment">#搜索模板</span></span><br><span class="line"><span class="string">|</span>   <span class="string">|</span>   <span class="string">├──</span> <span class="string">share</span>      <span class="comment">#分享模板</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">_script</span>        <span class="comment">#局部的布局</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">_third-party</span>   <span class="comment">#第三方模板</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">_layout.swig</span>   <span class="comment">#主页面模板</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">index.swig</span>     <span class="comment">#主页面模板</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">page</span>           <span class="comment">#页面模板</span></span><br><span class="line"><span class="string">|</span>   <span class="string">└──</span> <span class="string">tag.swig</span>       <span class="comment">#tag模板</span></span><br><span class="line"><span class="string">├──</span> <span class="string">scripts</span>            <span class="comment">#script源码</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">tags</span>           <span class="comment">#tags的script源码</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">marge.js</span>       <span class="comment">#页面模板</span></span><br><span class="line"><span class="string">├──</span> <span class="string">source</span>             <span class="comment">#源码</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">css</span>            <span class="comment">#css源码</span></span><br><span class="line"><span class="string">|</span>   <span class="string">|</span>   <span class="string">├──</span> <span class="string">_common</span>    <span class="comment">#*.styl基础css</span></span><br><span class="line"><span class="string">|</span>   <span class="string">|</span>   <span class="string">├──</span> <span class="string">_custom</span>    <span class="comment">#*.styl局部css</span></span><br><span class="line"><span class="string">|</span>   <span class="string">|</span>   <span class="string">└──</span> <span class="string">_mixins</span>    <span class="comment">#mixins的css</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">fonts</span>          <span class="comment">#字体</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">images</span>         <span class="comment">#图片</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">uploads</span>        <span class="comment">#添加的文件</span></span><br><span class="line"><span class="string">|</span>   <span class="string">└──</span> <span class="string">js</span>             <span class="comment">#javascript源代码</span></span><br><span class="line"><span class="string">├──</span> <span class="string">_config.yml</span>        <span class="comment">#主题配置文件</span></span><br><span class="line"><span class="string">└──</span> <span class="string">README.md</span>          <span class="comment">#用GitHub的都知道</span></span><br></pre></td></tr></table></figure>
<p>内容来自<br><a href="https://www.cnblogs.com/mrwuzs/p/7954438.html" target="_blank" rel="noopener">https://www.cnblogs.com/mrwuzs/p/7954438.html</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2020/05/30/Spring/</url>
    <content><![CDATA[<h3 id="Spring-框架两大核心机制（IoC、AOP）"><a href="#Spring-框架两大核心机制（IoC、AOP）" class="headerlink" title="Spring 框架两大核心机制（IoC、AOP）"></a>Spring 框架两大核心机制（IoC、AOP）</h3><ul>
<li>IoC（控制反转）/ DI（依赖注入）</li>
<li>AOP（面向切面编程）</li>
</ul>
<p>Spring 是一个企业级开发框架，是软件设计层面的框架，优势在于可以将应用程序进行分层，开发者可以自主选择组件。</p>
<p>MVC：Struts2、Spring MVC</p>
<p>ORMapping：Hibernate、MyBatis、Spring Data</p>
<h3 id="如何使用-IoC"><a href="#如何使用-IoC" class="headerlink" title="如何使用 IoC"></a>如何使用 IoC</h3><ul>
<li>创建 Maven 工程，pom.xml 添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.southwind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aispringioc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建实体类 Student</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>传统的开发方式，手动 new Student</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setId(<span class="number">1L</span>);</span><br><span class="line">student.setName(<span class="string">"张三"</span>);</span><br><span class="line">student.setAge(<span class="number">22</span>);</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过 IoC 创建对象，在配置文件中添加需要管理的对象，XML 格式的配置文件，文件名可以自定义。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>从 IoC 中获取对象，通过 id 获取。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载配置文件</span></span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring.xml"</span>);</span><br><span class="line">Student student = (Student) applicationContext.getBean(<span class="string">"student"</span>);</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure>



<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul>
<li><p>通过配置 <code>bean</code> 标签来完成对象的管理。</p>
<ul>
<li><p><code>id</code>：对象名。</p>
</li>
<li><p><code>class</code>：对象的模版类（所有交给 IoC 容器来管理的类必须有无参构造函数，因为 Spring 底层是通过反射机制来创建对象，调用的是无参构造）</p>
</li>
</ul>
</li>
<li><p>对象的成员变量通过 <code>property</code> 标签完成赋值。</p>
<ul>
<li><code>name</code>：成员变量名。</li>
<li><code>value</code>：成员变量值（基本数据类型，String 可以直接赋值，如果是其他引用类型，不能通过 value 赋值）</li>
<li><code>ref</code>：将 IoC 中的另外一个 bean 赋给当前的成员变量（DI）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Address"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"科技路"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="IoC-底层原理"><a href="#IoC-底层原理" class="headerlink" title="IoC 底层原理"></a>IoC 底层原理</h3><ul>
<li>读取配置文件，解析 XML。</li>
<li>通过反射机制实例化配置文件中所配置所有的 bean。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathXmlApplicationContext</span> <span class="keyword">implements</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; ioc = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            Document document = reader.read(<span class="string">"./src/main/resources/"</span>+path);</span><br><span class="line">            Element root = document.getRootElement();</span><br><span class="line">            Iterator&lt;Element&gt; iterator = root.elementIterator();</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                Element element = iterator.next();</span><br><span class="line">                String id = element.attributeValue(<span class="string">"id"</span>);</span><br><span class="line">                String className = element.attributeValue(<span class="string">"class"</span>);</span><br><span class="line">                <span class="comment">//通过反射机制创建对象</span></span><br><span class="line">                Class clazz = Class.forName(className);</span><br><span class="line">                <span class="comment">//获取无参构造函数，创建目标对象</span></span><br><span class="line">                Constructor constructor = clazz.getConstructor();</span><br><span class="line">                Object object = constructor.newInstance();</span><br><span class="line">                <span class="comment">//给目标对象赋值</span></span><br><span class="line">                Iterator&lt;Element&gt; beanIter = element.elementIterator();</span><br><span class="line">                <span class="keyword">while</span>(beanIter.hasNext())&#123;</span><br><span class="line">                    Element property = beanIter.next();</span><br><span class="line">                    String name = property.attributeValue(<span class="string">"name"</span>);</span><br><span class="line">                    String valueStr = property.attributeValue(<span class="string">"value"</span>);</span><br><span class="line">                    String ref = property.attributeValue(<span class="string">"ref"</span>);</span><br><span class="line">                    <span class="keyword">if</span>(ref == <span class="keyword">null</span>)&#123;</span><br><span class="line">                        String methodName = <span class="string">"set"</span>+name.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+name.substring(<span class="number">1</span>);</span><br><span class="line">                        Field field = clazz.getDeclaredField(name);</span><br><span class="line">                        Method method = clazz.getDeclaredMethod(methodName,field.getType());</span><br><span class="line">                        <span class="comment">//根据成员变量的数据类型将 value 进行转换</span></span><br><span class="line">                        Object value = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">if</span>(field.getType().getName() == <span class="string">"long"</span>)&#123;</span><br><span class="line">                            value = Long.parseLong(valueStr);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(field.getType().getName() == <span class="string">"java.lang.String"</span>)&#123;</span><br><span class="line">                            value = valueStr;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(field.getType().getName() == <span class="string">"int"</span>)&#123;</span><br><span class="line">                            value = Integer.parseInt(valueStr);</span><br><span class="line">                        &#125;</span><br><span class="line">                        method.invoke(object,value);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ioc.put(id,object);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ioc.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="通过运行时类获取-bean"><a href="#通过运行时类获取-bean" class="headerlink" title="通过运行时类获取 bean"></a>通过运行时类获取 bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring.xml"</span>);</span><br><span class="line">Student student = (Student) applicationContext.getBean(Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure>

<p>这种方式存在一个问题，配置文件中一个数据类型的对象只能有一个实例，否则会抛出异常，因为没有唯一的 bean。</p>
<h3 id="通过有参构造创建-bean"><a href="#通过有参构造创建-bean" class="headerlink" title="通过有参构造创建 bean"></a>通过有参构造创建 bean</h3><ul>
<li>在实体类中创建对应的有参构造函数。</li>
<li>配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student3"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小明"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student3"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"小明"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"3"</span> <span class="attr">ref</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="给-bean-注入集合"><a href="#给-bean-注入集合" class="headerlink" title="给 bean 注入集合"></a>给 bean 注入集合</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"李四"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"33"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addresses"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"address2"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Address"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"科技路"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address2"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Address"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"高新区"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="scope-作用域"><a href="#scope-作用域" class="headerlink" title="scope 作用域"></a>scope 作用域</h3><p>Spring 管理的 bean 是根据 scope 来生成的，表示 bean 的作用域，共4种，默认值是 singleton。</p>
<ul>
<li>singleton：单例，表示通过 IoC 容器获取的 bean 是唯一的。</li>
<li>prototype：原型，表示通过 IoC 容器获取的 bean 是不同的。</li>
<li>request：请求，表示在一次 HTTP 请求内有效。</li>
<li>session：回话，表示在一个用户会话内有效。</li>
</ul>
<p>request 和 session 只适用于 Web 项目，大多数情况下，使用单例和原型较多。</p>
<p>prototype 模式当业务代码获取 IoC 容器中的 bean 时，Spring 才去调用无参构造创建对应的 bean。</p>
<p>singleton 模式无论业务代码是否获取 IoC 容器中的 bean，Spring 在加载 spring.xml 时就会创建 bean。</p>
<h3 id="Spring-的继承"><a href="#Spring-的继承" class="headerlink" title="Spring 的继承"></a>Spring 的继承</h3><p>与 Java 的继承不同，Java 是类层面的继承，子类可以继承父类的内部结构信息；Spring 是对象层面的继承，子对象可以继承父对象的属性值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student2"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addresses"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"address2"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Address"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"科技路"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address2"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Address"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"高新区"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stu"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Student"</span> <span class="attr">parent</span>=<span class="string">"student2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"李四"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Spring 的继承关注点在于具体的对象，而不在于类，即不同的两个类的实例化对象可以完成继承，前提是子对象必须包含父对象的所有属性，同时可以在此基础上添加其他的属性。</p>
<h3 id="Spring-的依赖"><a href="#Spring-的依赖" class="headerlink" title="Spring 的依赖"></a>Spring 的依赖</h3><p>与继承类似，依赖也是描述 bean 和 bean 之间的一种关系，配置依赖之后，被依赖的 bean 一定先创建，再创建依赖的 bean，A 依赖于 B，先创建 B，再创建 A。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Student"</span> <span class="attr">depends-on</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.User"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Spring-的-p-命名空间"><a href="#Spring-的-p-命名空间" class="headerlink" title="Spring 的 p 命名空间"></a>Spring 的 p 命名空间</h3><p>p 命名空间是对 IoC / DI 的简化操作，使用 p 命名空间可以更加方便的完成 bean 的配置以及 bean 之间的依赖注入。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Student"</span> <span class="attr">p:id</span>=<span class="string">"1"</span> <span class="attr">p:name</span>=<span class="string">"张三"</span> <span class="attr">p:age</span>=<span class="string">"22"</span> <span class="attr">p:address-ref</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Address"</span> <span class="attr">p:id</span>=<span class="string">"2"</span> <span class="attr">p:name</span>=<span class="string">"科技路"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Spring-的工厂方法"><a href="#Spring-的工厂方法" class="headerlink" title="Spring 的工厂方法"></a>Spring 的工厂方法</h3><p>IoC 通过工厂模式创建 bean 的方式有两种：</p>
<ul>
<li>静态工厂方法</li>
<li>实例工厂方法</li>
</ul>
<blockquote>
<p>静态工厂方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long, Car&gt; carMap;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        carMap = <span class="keyword">new</span> HashMap&lt;Long, Car&gt;();</span><br><span class="line">        carMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Car(<span class="number">1L</span>,<span class="string">"宝马"</span>));</span><br><span class="line">        carMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Car(<span class="number">2L</span>,<span class="string">"奔驰"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> carMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置静态工厂创建 Car --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.southwind.factory.StaticCarFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getCar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例工厂方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long, Car&gt; carMap;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InstanceCarFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        carMap = <span class="keyword">new</span> HashMap&lt;Long, Car&gt;();</span><br><span class="line">        carMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Car(<span class="number">1L</span>,<span class="string">"宝马"</span>));</span><br><span class="line">        carMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Car(<span class="number">2L</span>,<span class="string">"奔驰"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> carMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置实例工厂 bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"carFactory"</span> <span class="attr">class</span>=<span class="string">"com.southwind.factory.InstanceCarFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 赔偿实例工厂创建 Car --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">factory-bean</span>=<span class="string">"carFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getCar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="IoC-自动装载（Autowire）"><a href="#IoC-自动装载（Autowire）" class="headerlink" title="IoC 自动装载（Autowire）"></a>IoC 自动装载（Autowire）</h3><p>IoC 负责创建对象，DI 负责完成对象的依赖注入，通过配置 property 标签的 ref 属性来完成，同时 Spring 提供了另外一种更加简便的依赖注入方式：自动装载，不需要手动配置 property，IoC 容器会自动选择 bean 完成注入。</p>
<p>自动装载有两种方式：</p>
<ul>
<li>byName：通过属性名自动装载</li>
<li>byType：通过属性的数据类型自动装载</li>
</ul>
<blockquote>
<p>byName</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cars"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Car"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"宝马"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Person"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"11"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>byType</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Car"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"奔驰"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.southwind.entity.Person"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"11"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>byType 需要注意，如果同时存在两个及以上的符合条件的 bean 时，自动装载会抛出异常。</p>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>AOP：Aspect Oriented Programming 面向切面编程。</p>
<p>AOP 的优点：</p>
<ul>
<li>降低模块之间的耦合度。</li>
<li>使系统更容易扩展。</li>
<li>更好的代码复用。</li>
<li>非业务代码更加集中，不分散，便于统一管理。</li>
<li>业务代码更加简洁存粹，不参杂其他代码的影响。</li>
</ul>
<p>AOP 是对面向对象编程的一个补充，在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面编程。将不同方法的同一个位置抽象成一个切面对象，对该切面对象进行编程就是 AOP。</p>
<h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><ul>
<li>创建 Maven 工程，pom.xml 添加</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个计算器接口 Cal，定义4个方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建接口的实现类 CalImpl。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.utils.Cal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalImpl</span> <span class="keyword">implements</span> <span class="title">Cal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"add方法的参数是["</span>+num1+<span class="string">","</span>+num2+<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1+num2;</span><br><span class="line">        System.out.println(<span class="string">"add方法的结果是"</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sub方法的参数是["</span>+num1+<span class="string">","</span>+num2+<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1-num2;</span><br><span class="line">        System.out.println(<span class="string">"sub方法的结果是"</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mul方法的参数是["</span>+num1+<span class="string">","</span>+num2+<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1*num2;</span><br><span class="line">        System.out.println(<span class="string">"mul方法的结果是"</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"div方法的参数是["</span>+num1+<span class="string">","</span>+num2+<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1/num2;</span><br><span class="line">        System.out.println(<span class="string">"div方法的结果是"</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>上述代码中，日志信息和业务逻辑的耦合性很高，不利于系统的维护，使用 AOP 可以进行优化，如何来实现 AOP？使用动态代理的方式来实现。</p>
<p>给业务代码找一个代理，打印日志信息的工作交个代理来做，这样的话业务代码就只需要关注自身的业务即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接收委托对象</span></span><br><span class="line">    <span class="keyword">private</span> Object object = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">bind</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(object.getClass().getClassLoader(),object.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(method.getName()+<span class="string">"方法的参数是："</span>+ Arrays.toString(args));</span><br><span class="line">        Object result = method.invoke(<span class="keyword">this</span>.object,args);</span><br><span class="line">        System.out.println(method.getName()+<span class="string">"的结果是"</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上是通过动态代理实现 AOP 的过程，比较复杂，不好理解，Spring 框架对 AOP 进行了封装，使用 Spring 框架可以用面向对象的思想来实现 AOP。</p>
<p>Spring 框架中不需要创建 InvocationHandler，只需要创建一个切面对象，将所有的非业务代码在切面对象中完成即可，Spring 框架底层会自动根据切面类以及目标类生成一个代理对象。</p>
<p>LoggerAspect</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(value = <span class="string">"execution(public int com.southwind.utils.impl.CalImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        <span class="comment">//获取参数</span></span><br><span class="line">        String args = Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        System.out.println(name+<span class="string">"方法的参数是："</span>+ args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(value = <span class="string">"execution(public int com.southwind.utils.impl.CalImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法执行完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"execution(public int com.southwind.utils.impl.CalImpl.*(..))"</span>,returning = <span class="string">"result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint,Object result)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法的结果是"</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(value = <span class="string">"execution(public int com.southwind.utils.impl.CalImpl.*(..))"</span>,throwing = <span class="string">"exception"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint,Exception exception)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法抛出异常："</span>+exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LoggerAspect 类定义处添加的两个注解：</p>
<ul>
<li><code>@Aspect</code>：表示该类是切面类。</li>
<li><code>@Component</code>：将该类的对象注入到 IoC 容器。</li>
</ul>
<p>具体方法处添加的注解：</p>
<p><code>@Before</code>：表示方法执行的具体位置和时机。</p>
<p>CalImpl 也需要添加 <code>@Component</code>，交给 IoC 容器来管理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.utils.Cal;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalImpl</span> <span class="keyword">implements</span> <span class="title">Cal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1+num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1-num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1*num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1/num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>spring.xml 中配置 AOP。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.southwind"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 是Aspect注解生效，为目标类自动生成代理对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>context:component-scan</code> 将 <code>com.southwind</code> 包中的所有类进行扫描，如果该类同时添加了 <code>@Component</code>，则将该类扫描到 IoC 容器中，即 IoC 管理它的对象。</p>
<p><code>aop:aspectj-autoproxy</code> 让 Spring 框架结合切面类和目标类自动生成动态代理对象。</p>
<ul>
<li>切面：横切关注点被模块化的抽象对象。</li>
<li>通知：切面对象完成的工作。</li>
<li>目标：被通知的对象，即被横切的对象。</li>
<li>代理：切面、通知、目标混合之后的对象。</li>
<li>连接点：通知要插入业务代码的具体位置。</li>
<li>切点：AOP 通过切点定位到连接点。</li>
</ul>
<h3 id="简单步骤"><a href="#简单步骤" class="headerlink" title="简单步骤"></a>简单步骤</h3><p>1、定义类(把类交给spring管理，用component注解)</p>
<p>2、定义切面类</p>
<pre><code>1、把切面类交给spring管理  用component注解
2、声明该类是切面类  用 Aspect 注解</code></pre><p>3、通知  可以是前置后置或其他可用通知</p>
<pre><code>@Before(value = &quot;execution(public int com.southwind.utils.impl.CalImpl.*(..))&quot;)</code></pre><p>类中的方法如果全要使用可以用*表示 参数为..则表示使用任意数量的参数<br>前置通知  只有一个参数的时候可以不加value<br>完整写法 前置通知(value = “execution(限定修饰符 返回值类型 类的全路径.类中的方法名(参数))”)</p>
<p>4、连接点 JoinPoint joinPoint</p>
<p>5、打印日志</p>
<p>6、xml配置 自动扫描</p>
<pre><code>&lt;context:component-scan base-package=&quot;com.southwind&quot;&gt;&lt;/context:component-scan&gt;</code></pre><p>使Aspect注解生效，为目标类自动生成代理对象</p>
<pre><code>&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</code></pre><p>7、代理对象默认使用对象的首字母小写后的对象名</p>
<pre><code>如：类名是Person    代理类名默认使用person </code></pre><p>8、也可以自定义  在类上的component注解中设置值  </p>
<pre><code>如：component(&quot;test&quot;)</code></pre>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring（IoC、AOP）</tag>
      </tags>
  </entry>
  <entry>
    <title>java流</title>
    <url>/2020/04/12/javaFile/</url>
    <content><![CDATA[<h2 id="1-0-File概述与构造"><a href="#1-0-File概述与构造" class="headerlink" title="1.0 File概述与构造"></a>1.0 File概述与构造</h2><p><img src="https://img-blog.csdnimg.cn/20200308152155474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200308152832715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>指向一個文件，用以上三個方法都可以，但一般來説常用第一種（比較簡單）</p>
<h2 id="1-2-File-创建功能"><a href="#1-2-File-创建功能" class="headerlink" title="1.2 File 创建功能"></a>1.2 File 创建功能</h2><p><img src="https://img-blog.csdnimg.cn/20200308154334942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200308154059292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="1-3-File类删除功能"><a href="#1-3-File类删除功能" class="headerlink" title="1.3 File类删除功能"></a>1.3 File类删除功能</h2><p><img src="https://img-blog.csdnimg.cn/2020030816075095.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>操作<br><img src="https://img-blog.csdnimg.cn/20200308160828430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="1-4-File类判断和获取功能"><a href="#1-4-File类判断和获取功能" class="headerlink" title="1.4 File类判断和获取功能"></a>1.4 File类判断和获取功能</h2><p><img src="https://img-blog.csdnimg.cn/20200308154507511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>操作</strong><br><img src="https://img-blog.csdnimg.cn/20200308154838762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200308155435176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="1-5-递归遍历File"><a href="#1-5-递归遍历File" class="headerlink" title="1.5 递归遍历File"></a>1.5 递归遍历File</h2><p><img src="https://img-blog.csdnimg.cn/20200309135221774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-0-字节流"><a href="#2-0-字节流" class="headerlink" title="2.0 字节流"></a>2.0 字节流</h2><p><img src="https://img-blog.csdnimg.cn/2020030913565370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-1-io流分类"><a href="#2-1-io流分类" class="headerlink" title="2.1 io流分类"></a>2.1 io流分类</h2><p><img src="https://img-blog.csdnimg.cn/20200309135953403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-2-字节流写数据"><a href="#2-2-字节流写数据" class="headerlink" title="2.2 字节流写数据"></a>2.2 字节流写数据</h2><p><img src="https://img-blog.csdnimg.cn/20200309141325265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200309141622384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-3-字节流写数据的3种方式"><a href="#2-3-字节流写数据的3种方式" class="headerlink" title="2.3 字节流写数据的3种方式"></a>2.3 字节流写数据的3种方式</h2><p><img src="https://img-blog.csdnimg.cn/20200309141726905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200309143039416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-4-字节流写入数据之换行和追加"><a href="#2-4-字节流写入数据之换行和追加" class="headerlink" title="2.4 字节流写入数据之换行和追加"></a>2.4 字节流写入数据之换行和追加</h2><p><img src="https://img-blog.csdnimg.cn/20200309145218701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309145126954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-5-io流异常处理"><a href="#2-5-io流异常处理" class="headerlink" title="2.5 io流异常处理"></a>2.5 io流异常处理</h2><p>关闭资源前先判断文件创建是否为空以保证程序的健壮性<br><img src="https://img-blog.csdnimg.cn/20200309151144797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-6-字节流读取数据-FileInputStream"><a href="#2-6-字节流读取数据-FileInputStream" class="headerlink" title="2.6 字节流读取数据 FileInputStream"></a>2.6 字节流读取数据 FileInputStream</h2><p><img src="https://img-blog.csdnimg.cn/20200309160532831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2.61 多次读取并优化 加 文件复制</strong><br><img src="https://img-blog.csdnimg.cn/2020030916175178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>2.62  字节流读数据一次读取一个数组</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20200309193328963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>2.63  字节流实例 复制图片</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20200309195417185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-7-字节缓冲流"><a href="#2-7-字节缓冲流" class="headerlink" title="2.7 字节缓冲流"></a>2.7 字节缓冲流</h2><p>好处：提高读写数据效率<br><img src="https://img-blog.csdnimg.cn/2020030919594850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>2.71 字节缓冲流读写</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20200309201449685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>2.72  字节缓冲流复制视频</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20200309203743667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>同一个视频<br>基本字节流   一次读写一个字节 64656毫秒        一次读写一个字节数组   107毫秒<br><img src="https://img-blog.csdnimg.cn/20200309202550274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>字节缓冲流一次读一个字节  405毫秒<br><img src="https://img-blog.csdnimg.cn/20200309202952548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>字节缓冲流一次读一个字节数组  60毫秒   优先选择<br><img src="https://img-blog.csdnimg.cn/20200309203212328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-0-字符流"><a href="#3-0-字符流" class="headerlink" title="3.0 字符流"></a>3.0 字符流</h2><p><img src="https://img-blog.csdnimg.cn/20200309205518260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-2-字符流写数据的五种方法"><a href="#3-2-字符流写数据的五种方法" class="headerlink" title="3.2 字符流写数据的五种方法"></a>3.2 字符流写数据的五种方法</h2><p><img src="https://img-blog.csdnimg.cn/20200311114402378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意事项：<br><img src="https://img-blog.csdnimg.cn/2020031111442196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>具体操作<br><img src="https://img-blog.csdnimg.cn/20200311114332519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-3-字符流读数据的两种方法"><a href="#3-3-字符流读数据的两种方法" class="headerlink" title="3.3 字符流读数据的两种方法"></a>3.3 字符流读数据的两种方法</h2><p><img src="https://img-blog.csdnimg.cn/20200311114456348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>具体操作<br><img src="https://img-blog.csdnimg.cn/20200311114547620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-4-字符流简化类"><a href="#3-4-字符流简化类" class="headerlink" title="3.4 字符流简化类"></a>3.4 字符流简化类</h2><p>简化书写使用FiledReader和FiledWriter(编码格式默认) ，但是 ，如果字符流中涉及对编码的操作则必须使用非简化类InputStreamReader和OutputStreamWrite<br><img src="https://img-blog.csdnimg.cn/20200311132935697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>具体操作</p>
<p><img src="https://img-blog.csdnimg.cn/20200311133756962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-5-字符缓冲流"><a href="#3-5-字符缓冲流" class="headerlink" title="3.5 字符缓冲流"></a>3.5 字符缓冲流</h2><p><img src="https://img-blog.csdnimg.cn/20200311134055805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>默认缓冲大小为8192</p>
<p><img src="https://img-blog.csdnimg.cn/20200311134622106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-6-字符缓冲流特有功能"><a href="#3-6-字符缓冲流特有功能" class="headerlink" title="3.6 字符缓冲流特有功能"></a>3.6 字符缓冲流特有功能</h2><p><img src="https://img-blog.csdnimg.cn/20200311135150724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>具体操作  写数据<br>可以用以替换具体操作系统的换行字符，可以在任意系统实现换行newLine<br><img src="https://img-blog.csdnimg.cn/20200311135746591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>具体操作  读数据<br>需要注意的是读的方法不会读空格换行等终止字符   如果流的结尾已经到达，则会返回null<br><img src="https://img-blog.csdnimg.cn/20200311135818934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-61-复制文件标准格式-最常用的方法"><a href="#3-61-复制文件标准格式-最常用的方法" class="headerlink" title="3.61 复制文件标准格式 最常用的方法"></a>3.61 复制文件标准格式 最常用的方法</h2><p>1.用数据缓冲流读文件<br>2.用数据缓冲流写文件<br>3.添加换行方法（因为readerLine()的方法不会读取换行符，所以写数据时手动添加  newLine方法）<br>4.刷新流<br>6.释放资源<br><img src="https://img-blog.csdnimg.cn/20200311140653371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-7-IO流总结"><a href="#3-7-IO流总结" class="headerlink" title="3.7 IO流总结"></a>3.7 IO流总结</h2><p>字节流<br><img src="https://img-blog.csdnimg.cn/20200311141325128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200311141444242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>字符流<br><img src="https://img-blog.csdnimg.cn/20200311141557700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200311141819666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>javaio</tag>
      </tags>
  </entry>
  <entry>
    <title>Java异常</title>
    <url>/2020/04/12/java%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200303195708621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a><strong>Throwable</strong></h2><p><img src="https://img-blog.csdnimg.cn/20200303203116445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Java异常情况为两种Error错误和Excepion异常"><a href="#Java异常情况为两种Error错误和Excepion异常" class="headerlink" title="Java异常情况为两种Error错误和Excepion异常"></a><strong>Java异常情况为两种Error错误和Excepion异常</strong></h2><p>Error错误,指的是Java运行时的内部错误和资源耗尽错误，应用程序不会<br>抛出此类异常，一般情况会告知用户并自动结束程序，很少出现</p>
<p>Excepion,异常又分为编译时异常和运行时异常，编译时异常会在程序编写界面直接提示错误（如包找不到，语法错误等）；运行时异常 会在代码运行的时候报错，常见有：</p>
<p>IndexOutOfBoundsException：索引越界异常</p>
<p>ArrayIndexOutOfBoundsException：数组越界异常</p>
<p>ArithmeticException：算数运算异常</p>
<p>IllegalArgumentException：非法参数异常</p>
<p>ClassCastException：类型转换异常</p>
<p>ClassNotFoundException：类未找到异常</p>
<p>NullPointerException：空指针异常</p>
<p>NumberFormatException：数据格式异常</p>
<p>FileNotFoundException：文件未找到异常</p>
<p>NoSuchElementException：没有这个元素异常（迭代器中到了末尾，还继续访问）</p>
<h2 id="JVM的默认处理方案"><a href="#JVM的默认处理方案" class="headerlink" title="JVM的默认处理方案"></a><strong>JVM的默认处理方案</strong></h2><p>如果程序出现了异常，我们又没有处理该异常，最终JVM会做默认处理<br>JVM会把异常的名称，原因，位置等信息显示在控制台上 然后程序停止执行</p>
<p><strong>异常处理try…catch</strong><br><img src="https://img-blog.csdnimg.cn/20200303203645830.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200303203743389.png" alt="在这里插入图片描述"></p>
<p>执行流程<br>程序从try{}开始执行，当程序出现异常时，会自动生成一个异常类对象，该异常对象会被提交给java运行时系统，Java运行时系统会在接受到异常后，到catch中去寻找匹配的异常类，找到后进行异常处理，处理完毕程序可以接着往后边执行</p>
<h2 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a><strong>自定义异常类</strong></h2><p>用户自定义异常都应该继承Exception基类，如果希望自定义Runtime异常，则应该继承RuntimeException基类，定义异常类时通常需要提供两个构造器，一个是无参数构造器，另一个是需要一个字符串参数的构造器，这个字符串作为该异常信息的描述信息（也就是异常对象的getMessage()方法返回的值）</p>
<p><img src="https://img-blog.csdnimg.cn/20200303203531155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a><strong>throws</strong></h2><p>虽然我们可以通过try catch 来处理异常，但并不是任何情况我们都有异常处理的权限，又时候我们处理不累异常，因此Java为我们提供了throws的解决方案<br>格式：<br>public 方法名（）throws 异常类名{}</p>
<p><strong>throws和throw的区别</strong><br><img src="https://img-blog.csdnimg.cn/20200303203302138.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>javaExcepion</tag>
      </tags>
  </entry>
  <entry>
    <title>javaStringBuilder</title>
    <url>/2020/04/12/javaStringBuilder/</url>
    <content><![CDATA[<p>如果对字符串拼接，每次拼接，都会创建一个新的String对象，即耗时又浪费内存空间，而这种操作又是不可避免的，我们就可以通过Java提供的StringBuilder类来解决这个问题。<br>StringBuilder是一个可变(对象中的内容可变)的字符串类，我们可以把它看成一个容器</p>
<p>StringBuilder：可变<br>String：不可变<br>构造方法<br>public StringBuilder（）；<br>public StringBuilder（String str）;</p>
<p>方法<br>public StringBuilder append（任意类型）； 添加数据，并<strong>返回对象本身</strong><br>大量字符串连接一定要用append（）方法，可以完成String的拼接，并且比String+的效率高N倍（由于String的拼接每次会创建新的对象）<br>    例：String s1=”abc”; String s2=”def”; s1+s2=”abcdef”;<br>    StringBuilder sb = new StringBuilder();<br>    sb.append(“abc”).append(“def”)…由于<strong>返回的是对象本身</strong>所以可以继续调用对象的方法，此方法也叫链式编程</p>
<p>public StringBuilder reverse（）； 返回<strong>相反的字符序列</strong><br>例：StringBuilder sb = new StringBuilder();<br>    sb.append(“abc”).append(“def”)  输出sb为<strong>abcdef</strong><br>    sb.reverse;  输出sb为<strong>fedcba</strong></p>
<p>StringBuilder 转换为String 通过toString()<br>StringBuilder sb = new StringBuilder();<br>String s = sb.toString;</p>
<p>String 转换为StringBuilder 通过构造方法实现<br>String s = “abc”;<br>StringBuilder sb = new StringBuilder(s);</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据结构</title>
    <url>/2020/04/12/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><strong>栈</strong>：一种特殊的线性表，只允许在固定的一端进行插入和删除元素操作。进行数据插入和删除操作的一段称为栈顶，另一端称为栈底。栈中的数据元素遵守后进先出的原则。（吃了吐）<br><img src="https://img-blog.csdnimg.cn/20200306113004310.png" alt="在这里插入图片描述"><br><strong>压栈</strong>：栈的插入操作叫做进栈/压栈/入栈，入数据在栈底。<br><strong>出栈</strong>：栈的删除操作叫出栈，出数据在栈顶。<br><img src="https://img-blog.csdnimg.cn/2020030611303764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>队列</strong>：是另一种操作受限的线性表，是指只允许在表的一端进行插入操作的数据结构，具有“先进先出”的特点。（吃了拉）<br><img src="https://img-blog.csdnimg.cn/20200306113223725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>队列分为两种，一种为顺序队列，一种为链队列。在这里重点讲顺序循环队列</p>
<p><strong>数组</strong>：<br>查询数据：通过索引定位，查询任意数据耗时相同，查询效率高；<br>删除数据：需要把指定位置数据删除，然后把后边的每个数据向前移动，效率低，同理插入数据也一样效率低<br><img src="https://img-blog.csdnimg.cn/20200306112859273.png" alt="在这里插入图片描述"></p>
<p><strong>链表</strong>：</p>
<p>增删数据，只需要移动数据的地址即可，效率高<br>查询数据，必须从表头一个一个查找，因此效率低<br><img src="https://img-blog.csdnimg.cn/20200306112452146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvbHlMb3JkSGFuQ2hhdW4=,size_16,color_FFFFFF,t_70" alt="增删快，"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>javaData</tag>
      </tags>
  </entry>
</search>
